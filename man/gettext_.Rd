% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gettext_.R
\name{gettext_}
\alias{gettext_}
\alias{gettextf_}
\alias{ngettext_}
\alias{test_gettext_lang}
\title{Translate text messages in a different language than the one currently defined in the R session}
\usage{
gettext_(
  ...,
  domain = NULL,
  trim = TRUE,
  lang = getOption("data.io_lang", default = Sys.getenv("LANGUAGE", unset = "en"))
)

gettextf_(
  fmt,
  ...,
  domain = NULL,
  trim = TRUE,
  lang = getOption("data.io_lang", default = Sys.getenv("LANGUAGE", unset = "en"))
)

ngettext_(
  n,
  msg1,
  msg2,
  domain = NULL,
  lang = getOption("data.io_lang", default = Sys.getenv("LANGUAGE", unset = "en"))
)

test_gettext_lang(
  lang = getOption("data.io_lang", default = Sys.getenv("LANGUAGE", unset = "en")),
  n = 1
)
}
\arguments{
\item{...}{one of more character vectors.}

\item{domain}{the 'domain' for the translation, a character string or \code{NULL};
see \code{\link[base:gettext]{base::gettext()}} for more details.}

\item{trim}{logical indicating if the white space trimming should happen.}

\item{lang}{the target language (usually two lowercase letters, e.g., "en"
for English, "fr" for French, "de" for German, etc.)}

\item{fmt}{a character vector of format strings, each of up to 8192 bytes.}

\item{n}{a non-negative integer.}

\item{msg1}{the message to be used in English for \code{n = 1}.}

\item{msg2}{the message to be used in English for \verb{n = 0, 2, 3, ...}.}
}
\value{
A character vector with translated messages. \code{test_gettext_lang()}
only serve to test and demonstrate the translation in a given language.
}
\description{
Translation messages are obtained with \code{\link[base:gettext]{base::gettext()}} or
\code{\link[base:gettext]{base::ngettext()}}. But, there is no way to specify that one needs translated
messages in a different language than the current one in R. These functions
have an additional \verb{lang=} argument that allows to do so. If the \verb{lang=}
argument is not provided in the call, they behave exactly like the base
functions.
}
\details{
To prepare your package for translation with these functions, you should
import \code{gettext_()}, \code{gettextf_()} and \code{ngettext_()} from svMisc. Then, you
define \code{gettext <- gettext_}, \code{gettextf <- gettextf_} and
\code{ngettext <- ngettext_} in your R scripts in the package. Finally, you
change the current directory of your R console to the base folder of the
sources of your package and you issue \code{tools::update_pkg_po(".")} in R. Then,
you create translations for different languages and you provide translated
strings with, say, \href{https://poedit.net/}{poEdit}.
}
\examples{
old_lang <- Sys.setLanguage("fr") # Switch to French for R language

# R look for messages to be translated into gettext() calls, not gettext_()
# So, rename accordingly in your package:
gettext <- svMisc::gettext_
gettextf <- svMisc::gettextf_
ngettext <- svMisc::ngettext_

# Retrieve strings in same language
gettext("empty model supplied", "incompatible dimensions",
 domain="R-stats", lang = "fr")

# Retrieve strings in different languages
gettext("empty model supplied", "incompatible dimensions",
  domain="R-stats", lang = "en")
gettext("empty model supplied", "incompatible dimensions",
  domain="R-stats", lang = "de")

# Try to get strings translated in an unknown language (just return the strings)
gettext("empty model supplied", "incompatible dimensions",
  domain="R-stats", lang = "xx")

# Test with some translations from the svMisc package itself:
svMisc::test_gettext_lang()
svMisc::test_gettext_lang("fr", n = 1)
svMisc::test_gettext_lang("fr", n = 2)
svMisc::test_gettext_lang("en", n = 1)
svMisc::test_gettext_lang("en", n = 2)

Sys.setLanguage(old_lang) # Restore original language
rm(old_lang, gettext, gettextf, ngettext)
}
\seealso{
\code{\link[base:gettext]{base::gettext()}}, \code{\link[base:sprintf]{base::gettextf()}}, \code{\link[tools:update_pkg_po]{tools::update_pkg_po()}}.
}
